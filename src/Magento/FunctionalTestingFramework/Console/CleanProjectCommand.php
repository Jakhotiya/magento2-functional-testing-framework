<?php
// @codingStandardsIgnoreFile
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types = 1);

namespace Magento\FunctionalTestingFramework\Console;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;

class CleanProjectCommand extends Command
{
    const CONFIGURATION_FILES = [
        TESTS_BP . DIRECTORY_SEPARATOR . 'codeception.yml', // codeception.yml file for top level config
        TESTS_BP . DIRECTORY_SEPARATOR . 'tests' . DIRECTORY_SEPARATOR . 'functional.suite.yml', // functional.suite.yml for test execution config
        FW_BP . '/src/Magento/FunctionalTestingFramework/_generated', // Acceptance Tester Actions generated by codeception
        FW_BP . '/src/Magento/FunctionalTestingFramework/AcceptanceTester.php' // AcceptanceTester Class generated by codeception
    ];

    const GENERATED_FILES = [
        TESTS_MODULE_PATH . '/_generated'
    ];

    /**
     * Configures the current command.
     *
     * @return void
     */
    protected function configure()
    {
        $this->setName('reset')
            ->setDescription('This command will clean any configuration files from the environment (not including .env), as well as any generated artifacts.')
            ->addOption('hard', null, InputOption::VALUE_NONE, "parameter to force reset of configuration files.");
    }

    /**
     * Executes the current command.
     *
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return void
     * @throws \Symfony\Component\Console\Exception\LogicException
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $isHardReset = $input->getOption('hard');
        $fileSystem = new Filesystem();
        $finder = new Finder();
        $finder->files()->name('*.php')->in(FW_BP . '/src/Magento/FunctionalTestingFramework/Group/');

        $beforeState = $this->getFileSystemState($finder); // used only upon verbose output but useful for capturing debug state

        // delete config files if user specifies a hard reset
        if ($isHardReset) {
            $fileSystem->remove(self::CONFIGURATION_FILES);
        }

        // delete the files mftf generates during test execution in TESTS_BP
        $fileSystem->remove(self::GENERATED_FILES);

        // delete any suite based group files
        $fileSystem->remove($finder);

        if ($output->isVerbose()) {
            // build a list of the paths
            $afterState = $this->getFileSystemState($finder);
            $deletedFiles = array_diff($beforeState, $afterState);
            arsort($deletedFiles);

            $output->writeln("The following file(s) were deleted:");
            foreach ($deletedFiles as $deletedFile) {
                $output->writeln($deletedFile);
            }
        }
    }

    /**
     * Returns an array of files of concern for MFTF which represents state (i.e. existence on the filesysem). Uses
     * Symfony Finder component to determine location of any group files.
     *
     * @param Finder $finder
     * @return array
     */
    private function getFileSystemState(Finder $finder)
    {
        $exists = [];
        $files = array_merge(self::CONFIGURATION_FILES, self::GENERATED_FILES);
        foreach ($files as $file) {
            if (file_exists($file)) {
                $exists[] = $file;
            }
        }

        /** @var SplFileInfo $symfonyFile */
        foreach ($finder->files() as $symfonyFile) {
            $exists[] = $symfonyFile->getRealPath();
        }

        return $exists;
    }
}